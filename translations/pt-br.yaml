# Brazilian Portuguese

global.title: "Estruturando o HTML com CSS"
global.short_title: "CSS"
global.home: "Início"
global.toc: "Sumário"
global.next: "Próximo"
global.previous: "Anterior"
global.feedback: "Issues / Feedback"

util.extra_credit: "crédito extra"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "Início"
util.nav.2: "Taco Menu"
util.nav.3: "Rascunhos"
util.nav.4: "Horas"
util.nav.5: "Direções"
util.nav.6: "Contato"

index.1: "Este site ensina fundamentos para a estruturação html utilizando CSS."
index.2: "Suponho que você já saiba o que são seletores, propriedades e valores em um documento CSS. E que você provavelmente saiba uma coisa ou outra sobre estruturação HTML, mesmo que o assunto ainda seja intrigante para você. E caso você queira iniciar seus conhecimentos com HTML e CSS, verifique <a href=\"http://learn.shayhowe.com/html-css/\">este tutorial</a>, ou então, vamos continuar e ver se deixamos você mais tranquilo com seu projeto."
index.english: "english"
index.persian: "رسیدن"
index.spanish: "español"
index.translator: "Traduzido por  <a href=\"http://www.betomuniz.com\">Beto Muniz</a> e <a href=\"http://www.thiagoq.com\">Thiago Quintino</a>"
index.get_started: "Vamos Começar"

no_layout.title: "Sem estrutura"
no_layout.1: "Contruir um site sem estrutura num ponto de vista é aceitável, caso você queira apenas uma coluna gigante de conteúdo. Porém, quando o usuário encontra uma coluna com muito conteúdo, provavelmente irá desconsiderar todo este conteúdo, pois espera encontrar uma leitura bastante cansativa em cada linha que ele se dedicar a ler. Redimensione seu navegador para ver o que eu quero dizer!"
no_layout.2: "Antes de corrigirmos este problema, iremos ficar alinhados com a propriedade <code>display</code>, pois ela será muito importante para continuarmos."

display.title: "o propriedade \"display\""
display.intro: "<code>display</code> á a propriedade CSS mais importante para controlar a estrutura dos elementos. Cada elemento HTML, tem um padrão de <code>display</code> determinado pelo seu tipo. O caso mais encontrado de <code>display</code> são <code>block</code> ou <code>inline</code>. Um elemento <code>display:block</code> e referenciado a Elemento de Nível de Bloco ou \"block-level\". E um elemento <code>display:inline</code> é apenas chamado de \"elemento inline\""
display.block.title: "block"
display.block: "<code>div</code> é o elemento block-level padrão. Um elemento block-level começa uma nova linha e se estica para esquerda e direita o tanto quanto ele puder. Outros elementos block-level importantes são <code>p</code> e <code>form</code>, e em HTML5 temos <code>header</code>, <code>footer</code>, <code>section</code>, e muitos outros."
display.inline.title: "inline"
display.inline.1: "<code>span</code> é o elemento inline padrão. Um elemento inline pode envolver determinado trecho de um parágrafo"
display.inline.2: "como este"
display.inline.3: "sem interromper o fluxo do parágrafo. O elemento <code>a</code> é o elemento inline mais conhecido, se utilizado para linkar determinado conteúdo em um texto."
display.none.title: "none"
display.none.1: "Outro valor muito utilizado da propriedade <code>display</code> é o <code>none</code>. Alguns elementos especiais como <code>script</code> utilizam este valor por padrão. Outra utilização comum de <code>display:none</code>, fica na manipulação do estado dos elementos com Javascript para exibição e ocultação sem precisar criá-los e removê-los dinamicamente o tempo todo."
display.none.2: "Esta utilização é diferente do uso da propriedade <code>visibility</code>. Utilizando <code>display:none</code>  você limpará o fluxo onde o elemento era exibido, o que não acontece com <code>visibility:hidden</code>, que deixa um espaço vazio onde se encontrava o elemento."
display.other.title: "Outros valores da propriedade display"
display.other: "Existem inúmeros e incomuns valores da propriedade display, como: <code>list-item</code> e <code>table</code>. <a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">Veja aqui a listagem de todos</a>. Iremos discutir sobre <code>inline-block</code> e <code>flex</code> mais tarde."
display.extra: "Como mencionei, cada elemento HTML possui seu valor de display padrão. No entanto, você poderá <em>sempre</em> que desejar substituí-los! Embora não faça sentido uma <code>div</code> no modo inline, você pode utilizar isto para aplicar uma semântica particular a determinados elementos. Um exemplo comum é aplicar <code>display:inline</code> no elemento <code>li</code> para um menu horizontal."

margin_auto.title: "margin: auto;"
margin_auto.1: "Definindo a <code>largura</code> de um elemento block-level você impõe os limites que este elemento irá se estender para esquerda ou direita com a adição de conteúdo. E assim, colocando ambas as margins left e right com o valor <code>auto</code> você automaticamente centraliza horizontalmente seu elemento, pois o elemento vai ocupar a largura previamente definida e distribuir as margins left e right igualmente com o restante de espaço disponível."
margin_auto.2: "O problema desta técnica surge quando a janela do navegador é menor que a largura definida do elemento, pois o navegador irá criar uma barra de rolagem horizontal para exibição da sua página. Vamos melhorar este negócio..."

max_width.title: "max-width"
max_width.1: "Utilizando <code>max-width</code> no lugar de <code>width</code> nesta situação, você irá ajudar o navegador que possui uma janela menor a aplicar um estilo mais \" flexivel \" ao seu elemento. Isso é muito importante fazer, quando desenvolvemos páginas web acessíveis por dispositivos móveis. Redimensione esta página e confira!"
max_width.2: "A propósito, a propriedade <code>max-width</code> é <a href=\"http://caniuse.com/#search=max-width\">suportada pela maioria dos navegadores</a> incluindo IE7+, ou seja, não tenha medo de aplicá-la."

box_model.title: "o box model"
box_model.intro: "Já que estamos falando da largura dos elementos, devemos falar sobre uma grande limitação que a propriedade \"width\" apresenta: o <em>box model</em>. Quando você defini a largura de um elemento, ele pode se apresentar maior do que sua definição para o mesmo, e isto se explica facilmente, pois quando o elemento possui as propriedades <code>border</code> e <code>padding</code> os valores destas respecitivas propriedades se adicionam a largura do elemento. Veja o seguinte exemplo demonstrando elementos com os mesmos valores <code>width</code>, porém com exibições de saída diferente."
box_model.simple: "Sou pequeno..."
box_model.fancy: "E eu sou grande!"
box_model.outro: "Por muito tempo a solução disso foi a matemárica. Os desenvolvedores CSS quando se deparavam com isso subtraiam os valores de padding e border com a largura desejada, e assim se definia um valor final de largura para o elemento. Felizmente, essa \"gambiarra\" acabou..."

box_sizing.title: "box-sizing"
box_sizing.1: "Com o tempo, os desenvolvedores perceberam que utilizar a matemática para resolver este problema, saia um pouco da essencência \"divertida\" e simples do CSS e então uma propriedade chamada <code>box-sizing</code> foi criada. Quando você defini o <code>box-sizing: border-box;</code> de um elemento, o <code>padding</code> e o <code>border</code> não se adicionam na largura do elemento. Aqui está o exemplo da página anterior, mas com a propriedade <code>box-sizing: border-box;</code> sendo utilizada:"
box_sizing.simple: "Temos o mesmo tamanho agora!"
box_sizing.fancy: "Legaaal!"
box_sizing.2: "Já que esta aplicação é muito melhor, alguns autores desejando que todos os elementos de suas páginas funcionem assim, aplicam a seguinte técnica:"
box_sizing.3: "Isto assegura que todos os elementos serão dimensionados neste modo intuitivo."
box_sizing.4: "Uma vez que a propriedade <code>box-sizing</code> é muito nova, é recomendado utilizar os vendor-prefixies <code>-webkit-</code> e <code>-moz-</code> por enquanto, como já demonstrado nos exemplos. E também tenha em mente que ela só funcionará nos navegadores mais atuais e nos <a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a>."

position.title: "position"
position.intro: "Com o fim de desenvolvermos layouts mais complexos, precisamos discutir também sobre a propriedade <code>position</code>. Está propriedade possui diversos valores e vamos passar um por um, logo será impossível relembrar de todos e suas definições, sendo assim, é recomendado marcar esta página para futuras consultas."
position.static.title: "static"
position.static.1: "o valor <code>static</code> é um valor padrão de todos os elementos HTML. Um elemento com <code>position: static;</code> não se posiciona de maneira especial, é o mesmo que dizer que o elemento <em>não</em> tem posição definida ou então que este elemento pode ter <em>qualquer</em> posição."
position.relative.title: "relative"
position.relative.1: "o valor <code>relative</code> se comporta igualmente ao valor <code>static</code>, a menos que se adicione propriedades extras no estilo do elemento."
position.relative.2: "Definindo as propriedades <code>top</code>, <code>right</code>, <code>bottom</code>, e <code>left</code> em um elemento <em>relativamente-posicionado</em>, iremos ajustar a posição do mesmo com referência na posição normal dele, com a diferença de que outros elementos não irão tomar sua posição original deixada vazia."
position.fixed.title: "fixed"
position.fixed.1: "Um elemento que utiliza o valor fixed, se posiciona em relação ao viewport de exibição, ou seja, ele irá permanecer sempre no mesmo lugar, mesmo que se \"movimente\" a página com as barras de rolagem. Como quando se utiliza o valor <code>relative</code>, as propriedades <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> são utilizadas para definir o fluxo do elemento."
position.fixed.2: "Tenho certeza que você notou um elemento fixo no canto direito da tela, estou te dando a permissão de obervá-lo agora, e aqui segui está o CSS aplicado nele:"
position.fixed.3: "Um elemento fixo não deixa um espaço vazio onde ele se situa e nem quebra o fluxo da página."
position.fixed.4: "Browsers de dispositivos móveis são bastante instavéis ao lidar com o valor <code>fixed</code> da propriedade <code>position</code>. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">Saiba mais sobre o assunto aqui</a>."
position.fixed.example: "Oi! Não se importe comigo ainda."
position.absolute.title: "absolute"
position.absolute.1: "o valor <code>absolute</code> é o mais complicado. Este valor se comporta como o <code>fixed</code>, porém tendo como referência a <em>posição do elemento mais próximo</em> ao invés do viewport. Se um elemento absolutamente-posicionado não possuir elementos ancestrais posicionados, ele utilizará o <code>body</code> de referência. Lembre-se, um elemento posicionado é aquele cuja posição é qualquer coisa, exceto <code>static</ code>."
position.absolute.2: "Veja um exemplo simples:"
position.absolute.relative: "Este elemento é relativamente-posicionado. Se este elemento tivesse com <code>position: static;</code>, seu elemento filho escaparia e se posicionaria em relação ao elemento <code>body</code> do documento"
position.absolute.absolute: "Este elemento é absolutamente-posicionado. E é posicionado em relação ao seu elemento pai." 
position.absolute.3: "Este é um assunto complicado, mas é essencial para estrturar o HTML com CSS. Na próxima página, vamos utilizar a propriedade <code> position </ code> em um exemplo mais prático."
position_example.title: "exemplo: propriedade position"
position_example.1: "A propriedade position irá fazer um pouco mais de sentido neste exemplo mais realista de uma página"
position_example.section.1: "A propriedade <code>margin-left</code> do elemento <code>section</code> garante que não a espaço preenchido pelo elemento <code>nav</code>."
position_example.section.2: "Observe o que acontece quando você redimensionar seu navegador. Ele funciona muito bem!"
position_example.2: "Este exemplo funciona porque o container é maior que o nav. Se não fosse, o nav sairia do bloco que o envolve. Nas próximas páginas vamos discutir outras técnicas para estruturação HTML e que também possuem diferentes prós e contras."
position_example.footer: "Se você utilizar um cabeçalho ou um rodapé fixo, verifique se nada ficara oculto! Eu coloquei um <code> margin-bottom </ code> no elemento <code>body </ code> para isso."

float.title: "float"
float.1: "Outra propriedade utilizada para estruturação HTML é a propriedade <code>float</code>. A intenção dela é a quebra automática de um texto que envolve um elemento, como o exemplo abaixo:"

clear.title: "clear"
clear.floating: "Eu sinto que estou flutuando!"
clear.1: "A propriedade <code>clear</code> é importante para controlar o comportamento de elementos com a propriedade <code>float</code>. Confira estes dois exemplos:"
clear.2: "Neste caso, o elemento <code>section</code> está atualmente depois do elemento <code>div</code> em seu fluxo de HTML. No entanto, o elemento <code>div</code> está definido com <code>float:left</code>, e o que acontece é: o texto dentro do elemento <code>section</code> envolve o elemento <code>div</code> e no fim o elemento <code>section</code> envolve tudo. Mas e se quiséssemos o elemento <code>section</code> depois do elemento com <code>div</code>?"
clear.3: "Utilizando a propriedade <code>clear</code> podemos facilmente mover o elemento <code>div</code> para baixo do elemento com <code>float:left</code> aplicado. A propriedade <code>clear</code> possui os respecitivos valores: <code>left</code>,<code>right</code> e <code>both</code>."

clearfix.title: "clearfix hack"
clearfix.1: "Coisas ruins que podem acontecer quando se utiliza <code>float</code>:"
clearfix.2: "Oooops... esta imagem é maior do que o elemento que a contém, logo se explica o porque dela estourar os limites dele!"
clearfix.3: "Mass... Existe uma maneira de corrigirmos isto, com uma \"gambi's\", chamada de <em>clearfix hack</em>."
clearfix.4: "Vamos tentar adicionar esse novo CSS:"
clearfix.5: "Agora vamos ver o que acontece:"
clearfix.6: "Ótimooo!"
clearfix.7: "Isso funciona para navegadores modernos. Se você precisa dar suporte ao IE6, adicione o seguinte:"
clearfix.8: "Existem outros navegadores que exigem uma atenção extra para utilização desta técnica <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">O mundo do \"clearfixing\" é bastante assustador</a>, mas esta solução simples irá trabalhar para a grande maioria dos navegadores atuais."

float_layout.title: "exemplo: estruturando com float"
float_layout.1: "É muito comum construir estruturas inteira de uma página utilizando apenas com a propriedade <code>float</code>. Aqui veremos a mesma estrutura utilizada no exemplo anterior da propriedade <code>position</code>, mas com a propriedade <code>float</code> sendo utilizada para posicionar os blocos."
float_layout.2: "Este exemplo se comporta exatamente como o anterior, e observe que aplicamos a técnica de <code>clearfix</code> no container, porém não é necessaria neste exemplo, mas seria se a tag <code>nav</code> fosse maior que o conteúdo \"non-float\"."

percent.title: "width com porcentagem"
percent.1: "A unidade de porcentagem no CSS é relativa ao bloco que contém e ao objeto que utiliza esta unidade. É ótimo para definirmos dimensões escaláveis em imagens: aqui mostramos uma imagem que sempre terá 50% da largura de seu container. Redimensione a janela do seu navegador para ver o que acontece!"
percent.2: "Também poderiamos ter aplicado as propriedades <code>min-width</code> e <code>max-width</code> para limiter o máximo e o mínimo de largura que a imagem poderia expandir."
percent.layout.title: "estruturando uma página com porcentagem"
percent.layout.1: "Você pode utilizar porcentagem para estruturar uma página, mas isso exigirá bastante trabalho e cálculo. No exemplo abaixo, o elemento <code>nav</code> começa a se deformar a medida que a tela fica menor."
percent.layout.2: "Quando a viewport é muito estreita, o elemento <code>nav</code> fica esmagado. E nem poderiamos utilizar <code>min-width</code> para corrigirmos isso, pois a coluna direita não iria respeitar essa regra."

media_queries.title: "media queries"
media_queries.1: "\"Design Responsivo\" é uma técnica que faz com que sua página \"responda\" para o navegador ou dispositivos como ele deve exibir o conteúdo..."
media_queries.2: "Media queries é a maneira mais poderosa de se aplicar isso. E para confirmar esta afirmação, vamos dar larguras definidas para nossa estrutura que utiliza porcentagem e ter em uma coluna todo nosso conteúdo quando a tela do nosso navegador for muito pequena:"
media_queries.3: "Agora, quando você redimensionar seu navegador, veja o que acontece de legal!"
media_queries.4: "Ba Dum Tss! Agora nosso layout está sexy para ser exibido em dispositivos móveis. Aqui estão <a href=\"http://mediaqueri.es/\">alguns sites que utilizam media queries</a>. Aliás, media queries oferecem muito mais do que apenas detectar <code>min-width</code> e <code>max-width</code>: saiba mais na <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">MDN documentation da mozilla</a>."
media_queries.5: "Você pode melhorarar ainda mais a visualização de sua página em dispositivos móveis utilizando a <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta tag: viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "Para criar uma grid de blocos alinhadas horizontalmente, só era possível quando utilizávamos a propriedade <code>float</code>, mas agora com o valor inline-block da propriedade display, é ainda mais fácil de solucionarmos este problema. Vejamos exemplos de ambas as abordagens."
inline_block.hard_way.title: "O caminho difícil (aplicando float)"
inline_block.hard_way.box: "Estou flutuando!"
inline_block.hard_way.after: "Estou utilizando a propriedade <code>clear</code>, e não deixarei o próximo bloco flutuar."
inline_block.easy_way.title: "O caminho fácil (aplicando inline-block)"
inline_block.easy_way.info: "É possível obter o mesmo efeito utilizando o valor <code>inline-block</code> da propriedade <code>display</code>."
inline_block.easy_way.box: "Eu sou um inline-block!"
inline_block.easy_way.after: "E eu não preciso utilizar <code>clear</code> neste caso. Show!"
inline_block.2: "Mas para utilizar <code>display:inline-block</code> você precisará de um pouco mais de trabalho para dar suporte aos navegadores IE6 e IE7, <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">confira aqui como fazer isso</a>."

inline_block_layout.title: "estruturando com inline-block"
inline_block_layout.1: "Você também pode usar <code>inline-block</code> para estruturar páginas. Mas existem algumas coisas para se saber:"
inline_block_layout.caveat.1: "Elementos <code>inline-block</code> são afetados pela propriedade <code>vertical-align</code>, que você querer colocar com o valor <code>top</code>;"
inline_block_layout.caveat.2: "você precisa definir a largura de cada coluna;"
inline_block_layout.caveat.3: "Haverá espacamento entre os elementos caso haja espaço no HTML."
inline_block_layout.tada: "Ba Dum Tss!"

column.title: "column"
column.1: "Aqui temos um novo grupo de propriedades CSS que permite facilmente fazer várias colunas de texto. Dê uma olhada:"
column.2: "CSS columns é um grupo muito novo, logo você precisará utilizar vendor-prefixies, e também saiba que este grupo não funciona nos navegadores <a href=\"http://caniuse.com/#search=column\">IE9 e Opera Mini</a>. Além disso existem outras propriedades relacionadas a columns, <a href=\"http://www.quirksmode.org/css/multicolumn.html\">clique aqui para ler mais</a>. Caso contrário, vamos para o próximo tópico."

flexbox.title: "flexbox"
flexbox.1: "A nova maneira de estruturação HTML com <code>flexbox</code> está prestes a redefinir a forma de utilizarmos CSS para este fim. Infelizmente a  especificação mudou muito recentemente, e por isso ainda é implementada de forma diferente nos diferentes navegadores existentes. Ainda assim, eu gostaria de compartilhar alguns exemplos para que você saiba o que está chegando. Estes exemplos atualmente só funcionarão na implementação Flexbox do Google Chrome, com base na última versão da <a href=\"http://www.w3.org/TR/css3-flexbox/\">norma</a>."
flexbox.2: "Há uma série de recursos envolvendo a implementação flexbox. Se você quiser saber mais sobre Flexbox, <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">comece aqui</a> para saber como identificar se um recurso é o mais atual ou não. Recentemente, escrevi um <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">artigo detalhado com a última versão de sintaxe, não deixe de conferir</a>."
flexbox.3: "Podemos fazer muita coisa com Flexbox, veja abaixo alguns exemplos para ter uma idéia:"
flexbox.simple.title: "Estruturação simples utilizando Flexbox"
flexbox.simple.1: "Flexbox é muito fácil!"
flexbox.fancy.title: "Estruturação Sexy utilizando Flexbox"
flexbox.fancy.1: "Terei sempre 200px de largura se houver espaço, mas diminuirei para 100px de largura caso precisem de espaço, mas não menor que isso, é o meu limite!"
flexbox.fancy.2: "Terei sempre 200px de largura, nada me afetará."
flexbox.fancy.3: "Vou ocupar 1/3 da largura restante."
flexbox.fancy.4: "Vou ocupar 2/3 da largura restante."
flexbox.centering.title: "Centralizando com Flexbox"
flexbox.centering.1: "Finalmente, ficou muito simples e sem \"gambiarras\" centralizar um objeto com CSS!"

frameworks.title: "frameworks css"
frameworks.1: "Estruturação de HTML com CSS é mais complicado do que aparenta, e para isso alguns frameworks CSS existem para facilitar as coisas. Abaixo segue a lista de alguns que você pode conferir. Mas tenha em mente de que para utilizar um framework CSS você precisará saber o que sua página realmente precisa, e de que eles não subistituem a idéia de aprender como é o funcionamento do CSS."
frameworks.2: "É isso! Se você tiver qualquer comentário sobre este site, por favor <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">me avise no Twitter</a>!"


about.title: "sobre este site"
about.credits: "Escrito e construído por <a href=\"http://incompl.com\">Greg Smith</a>. Design de <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. Nós trabalhamos em <a href=\"http://bocoup.com\">Bocoup</a>."