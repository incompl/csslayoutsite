# Deutsch

global.title: "Layouten mit CSS"
global.short_title: "CSS"
global.home: "Home"
global.toc: "Inhaltsverzeichnis"
global.next: "Weiter"
global.previous: "Zurück"
global.feedback: "Probleme / Feedback"

util.extra_credit: "Danksagung"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "Home"
util.nav.2: "Taco Menu"
util.nav.3: "Getränke"
util.nav.4: "Öffnungszeiten"
util.nav.5: "Lageplan"
util.nav.6: "Kontakt"

index.1: "Diese Seite erläutert die CSS Grundlagen, die für sämtliche Weblayouts benötigt werden."
index.2: "Ich gehe davon aus, dass Sie bereits wissen, was Selektoren, Eigenschaften und Werte sind. Vermutlich haben Sie ebenso ein Grundwissen vom Layouten mit CSS, obwohl es Sie manchmal auf fast die Palme bringt. Wenn Sie HTML und CSS von Grund auf lernen wollen empfehle ich Ihnen <a href=\"http://learn.shayhowe.com/html-css/\">diesen Beginner's Guide</a>, <a href=\"http://jendryschik.de/wsdev/einfuehrung/\"diese Einführung</a> oder <a href=\"http://www.little-boxes.de/little-boxes-teil1-online.html\">dieses Buch</a>. Ansonsten hoffe ich, Ihnen einigen Ärger bei Ihrem nächsten Projekt ersparen zu können."
index.english: "english"
index.persian: "رسیدن"
index.spanish: "español"
index.translator: ""
index.get_started: "Los geht's"

no_layout.title: "Kein Layout"
no_layout.1: "Überhaupt kein Layout zu haben ist akzeptabel, wenn Sie lediglich eine grosse Spalte mit Inhalt füllen wollen. Wenn allerdings ein Besucher Ihrer Webseite sein Browserfenster maximiert, wird das Lesen für ihn irgendwie unangenehm. Denn nach jeder Zeile müssen seine Augen den Anfang der nächsten Zeile wieder suchen. Vergössern Sie dieses Fenster, dann sehen Sie, was ich meine."
no_layout.2: "Bevor wir uns um dieses Problem kümmern, müssen wir sicherstellen, dass wir die sehr wichtige Eigenschaft <code>display</code> richtig verstehen."

display.title: "Die Eigenschaft \"display\""
display.intro: "<code>display</code> ist die wichtigste CSS Eigenschaft zur Steuerung des Layouts. Jedes HTML Element hat einen vom Elemettyp abhängigen Standardwert für \"display\". Für die meisten Elemente ist das entweder <code>block</code> oder <code>inline</code>."
display.block.title: "block"
display.block: "<code>div</code> ist das neutrale standard Block-Element. Ein Block-Element beginnt immer in einer neuen Zeile und wird so breit, wie es geht. Weitere gebräuchliche Block-Elemente sind Überschriften <code>h1</code> bis <code>h6</code>, Absätze <code>p</code> oder Formulare <code>form</code>. In HTML5 sind neue Block-Elemente hinzugekommen, zum Beispiel <code>header</code>, <code>footer</code>, <code>section</code>."
display.inline.title: "inline"
display.inline.1: "<code>span</code> ist das standard Inline Element. Ein Inline Element kann beispielsweise Text in einem Absatz umfliessen"
display.inline.2: "z. B. so"
display.inline.3: "ohne den Textfluss im Absatz zu stören. Das <code>a</code> Element ist das gebräuchlichste Inline Element wei es für Links verwendet wird."
display.none.title: "none"
display.none.1: "Ein weiterer gebräuchlicher Wert für \"display\" ist <code>none</code>. Einige spezielle Elemente, wie <code>script</code> nutzen code>none</code> standardmässig. Es wird häufig in JavaScript verwendet um Elemente ein- und auszublenden ohne sie tatsächlich zu löschen und neu erstellen zu müssen."
display.none.2: "Davon zu unterscheiden ist <code>visibility</code>. Während die Eigenschaft <code>display</code> <code>none</code> keinen Freiraum lässt, wo das Element gewesen wäre, hinterlässt <code>visibility: hidden;</code> einen leeren Platzhalter."
display.other.title: "Weitere display Werte"
display.other: "Es gibt eine Anzahl eher exotischer Werte für \"display\", z. B. <code>list-item</code> and <code>table</code>. <a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">Hier gibt es eine an vollständige Liste</a>. Mit den Werten <code>inline-block</code> und <code>flex</code> werden wir uns später noch beschäftigen."
display.extra: "Wie ich erwähnt habe, besitzt jedes Element einen Standardwert. Dieser lässt sich aber <em>immer</em> überschreiben. Während es keinen Sinn ergibt ein inline div zu erstellen, lässt sich diese Möglichkeit ausnutzen um einem Element einen passenden Display-Wert zu geben. Ein typisches Beispiel dafür ist es, Listenelemente mit <code>display: inline</code> zu versehen um ein horizontales Menu zu erstellen."

margin_auto.title: "margin: auto;"
margin_auto.1: "Indem man die Breite (<code>width</code>) eines Block-Elements definiert, verhindert man, dass es sich nach rechts und links bis zum Rand des umgebenden Containers ausbreitet. Mit dem Setzen des rechten und linken Aussenabstands (margin) auf <code>auto</code> lässt sich das Element horizontal zentrieren. Das Element nimmt so die definierte Breite an und teilt den verbleibenden Aussenabstand gleichmässig auf."
margin_auto.2: "Nur wenn das Browserfenster schmaler wird als unser Element breit ist, ergibt sich ein Problem. Der Browser behebt dies indem er der Seite eine horizontale Bildlaufleiste (scrollbar) hinzufügt. Das lässt sich verbessern..."

max_width.title: "max-width"
max_width.1: "Die Situation bessert sich wenn wir anstelle von <code>width</code> <code>max-width</code> verwenden. Das ist wichtig damit unsere Seite auch auf Mobilgeräten gut nutzbar ist. Ändere die Fenstergrösse dieser Seite um zu sehen, was ich meine!"
max_width.2: "Übrigens: <code>max-width</code> wird von <a href=\"http://caniuse.com/#search=max-width\">von allen wichtigen Browsern unterstützt</a> inklusive IE7+. Sie können es daher unbeschwert einsetzen."

box_model.title: "Das Box Model"
box_model.intro: "Wenn wir über die Breite von HTML Elementen sprechen, müssen wir auch über die damit zusammenhängenden Probleme sprechen: Das <em>box model</em>. Denn wenn Sie die Breite eines Elements festlegen, kann es durchaus sein, dass das Element grösser wird, als Sie wollten, denn der Rahmen (border) und Innenabstand (padding) werdeb^n das Element über die definierte Breite hinaus vergrössern. Schauen Sie sich das folgende Beispiel an in welchem zwei Elemente mit dem selben Wert in <code>width</code> trotzdem verschiedene Breiten erhalten."
box_model.simple: "Ich bin schmaler..."
box_model.fancy: "und ich grösser!"
box_model.outro: "Während Generationen löste man dieses Problem mit Mathematik: CSS Autoren verwendeten in ihren Stylesheets einen kleineren Wert für <code>width</code> als erwünscht indem sie die Werte von <code>padding</code> und <code>border</code> davon subtrahierten. Glücklicherweise ist dies heutzutage nicht mehr nötig."

box_sizing.title: "box-sizing"
box_sizing.1: "Über die Zeit haben Leute festgestellt, dass Mathematik nicht allzu lustig ist. So wurde eine neue CSS-Eigenschaft namens <code>box-sizing</code>  geschaffen. Wenn man einem Element die Eigenschaft <code>box-sizing: border-box;</code> gibt, werden die Werte von <code>padding</code> und <code>border</code> nicht mehr der Breite hinzugerechnet. Hier noch einmal das Beispiel der vorherigen Seite aber nun mit <code>box-sizing: border-box;</code> für beide Element:"
box_sizing.simple: "Wir haben jetzt die gleiche Grösse!"
box_sizing.fancy: "Hurra!"
box_sizing.2: "Weil dies so viel besser ist, gibt es CSS Autoren die möchten, das alle Elemente auf allen ihren Seiten sich so verhalten. Dazu verwenden sie dieses CSS auf allen ihren Seiten:"
box_sizing.3: "Damit wird sichergestellt, dass die Grösse aller Elemente auf diese intuitivere Weise definiert werden kann."
box_sizing.4: "Weil <code>box-sizing</code> ziemlich neu ist, sollte man die vendor-prefixes <code>-webkit-</code> und <code>-moz-</code> benützen, wie ich es in diesen Beispielen getan habe. Mit dieser Technik können die experimentellen Eigenschafen für spezifische Browser freigeschaltet werden. Ebenfalls ist zu beachten, dass dies erst ab <a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a> funktioniert."

position.title: "position"
position.intro: "Um komplexere Layouts zu erstellen, müssen wir über die <code>position</code> -Eigenschaft reden. Sie hat mehrere mögliche Werte, deren Namen keinen Sinn machen unmöglich zu merken sind. Lass sie uns nacheinander durchgehen. Aber vielleicht solltest du diese Seite in deinen Bookmarks speichern."
position.static.title: "static"
position.static.1: "<code>static</code> ist der Standardwert. Ein Element mit <code>position: static;</code> wird auf keine besondere Art positioniert. Ein Element mit diesem Wert wird als <em>nicht positioniert</em> bezeichnet und ein Elemement mit jedem anderen Wert für die Position als <em>positioniert</em>."
position.relative.title: "relative"
position.relative.1: "<code>relative</code> verhält sich genau wie <code>static</code> außer es werden weitere Eigenschaften gesetzt."
position.relative.2: "Setzt man die Eigenschaften <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> eines relativ positionten Elementes passt sich dessen Position relativ zu seiner normalen Position an. Der restliche Inhalt wird nicht angepasst um die Lücke, die das Element hinterlassen hat, zu füllen."
position.fixed.title: "fixed"
position.fixed.1: "Ein fixiertes Element wird relativ zum Viewport platziert. Das heißt, das Element bleibt an der selben Stelle, auch wenn die Seite gescrollt wird. Wie bei <code>relative</code> werden die Eigenschaften <code>top</code>, <code>right</code>, <code>bottom</code> und <code>left</code>  benutzt"
position.fixed.2: "Sicher hast du das fixierte Element in der unteren rechten Ecke dieser Seite bemerkt. Hiermit erlaube ich dir, ihm deine Aufmerksamkeit zu schenken. Hier ist der CSS Code, der es da hingebracht hat:"
position.fixed.3: "Ein fixiertes Element hinterlässt keine Lücke, wo es normalerweise auf der Seite währe."
position.fixed.4: "Mobile Browser unterstützen fixed erstaunlich schlecht. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">Hier erfährst du mehr über diese Situation</a>."
position.fixed.example: "Hallo! Irgnorier mich erst einmal."
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code> ist der kniffeligste position-Wert. <code>absolute</code> verhält sich wie <code>fixed</code> aber relativ zum <em>nächten positionierten Ancestor</em> statt relativ zum Viewport. Hat ein absolut positioneiertes Element keinen positionierten Ancestor, benutzt es den document body und bewegt sich auch mit der gescrollten Seite. Zur Erinnetung: Ein \"positioniertes\" Element ist eines das als Position irgendeinen Wert außer <code>static</code> hat."
position.absolute.2: "Hier ist ein Beispiel:"
position.absolute.relative: "Dieses Element ist relativ positioniert. Währe es <code>position: static;</code> würde sein absolut positionieres child ausbrechen und am document body ausgerichtet."
position.absolute.absolute: "Dieses Element ist absolut positioniert. er wird relativ zum Elternelemt positioniert."
position.absolute.3: "Dieser Kram ist schwierig aber es ist wichtig um großartige CSS Layouts zu erstellen. Auf der nächsten Seite benutzen wir <code>position</code> in einem praktischeren Beispiel."

position_example.title: "position Beispiel"
position_example.1: "Dieser Positions-Kram macht warscheinlich mit einem praktischen Beispiel mehr Sinn. Unten siehst du ein realisches Seitenlayout."
position_example.section.1: "Der <code>margin-left</code> Stil der <code>section</code>s stellt den Platz für das <code>nav</code>-Ement sicher."
position_example.section.2: "Schau was passiert wenn du das Browserfenster verkleinerst. Funktioiert super!"
position_example.2: "Dieses Beispiel fuktioniert nur, weil der Container höher als die Nav. Währe das nicht so, würde die Navi über ihren Container hinausragen. Auf den folgenden Seiten besprechen wir Techniken, die ihre eigenen Stärken und Schwächen haben."
position_example.footer: "Wenn du einen fixierten Header oder Footer verwendest, stell sicher, dass du Platz dafür hast! Ich habe ein <code>margin-bottom</code> auf den <code>body</code> angewendet."

float.title: "float"
float.1: "Eine Weitere Eigenschaft, die für Layouts verwendet wird, is <code>float</code>. Float ist dazu vorgesehen Text um Bilder fließen zu lassen:"

clear.title: "clear"
clear.floating: "I feel like I'm floating!"
clear.1: "Die <code>clear</code> Eigenschaft kontrolliert das Verhalten von floats. Vergleiche ein mal diese beiden Beispiele:"
clear.2: "Hier kommt das <code>section</code>-Element zwar nach dem <code>div</code>. Aber weil das <code>div</code> nacht links floated, passiert folgendes: Der Text in der <code>section</code> fließt um das <code>div</code> herum, und die <code>section</code> umschließt das ganze. Wie bekommen wir die <code>section</code> nun dazu, auch tatsächlich nach dem gefloateten Element zu erscheinen?"
clear.3: "Mit Hilfe der <code>clear</code>-Eigenschaft haben wir die <code>section</code> nun unter das <code>div</code> geschoben. Der Wert <code>left</code> hebt das Umfließen um Elemente, die nach links gefloatet sind, auf. Das funktioniert auch für nach rechts gefloatete Elemente mit <code>right</code>, oder für beide Seiten mit <code>both</code>."

clearfix.title: "Der clearfix hack"
clearfix.1: "Es gibt da dieses nervige Problem, das bei der Verwendung von floats auftreten kann:"
clearfix.2: "Ups … dieses Bild ist größer als das Element, das es umschließt, und es ist gefloated, deshalb wächst es über den Rand des <code>div</code> hinaus!"
clearfix.3: "Buh. Das können wir geradebiegen, allerdings ist die Methode nicht besonders sauber. Sie nennt sich <em>clearfix hack</em>."
clearfix.4: "Versuchen wir mal, diese Zeilen hinzuzufügen:"
clearfix.5: "Mal sehen, was passiert:"
clearfix.6: "Schon viel besser!"
clearfix.7: "Das funktioniert in modernen Browsern. Um auch IE6 zu unterstützen, musst Du noch diese Zeilen hinzufügen:"
clearfix.8: "Ein paar exotischere Browser brauchen noch mal ein bisschen extra Zuwendung. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">Die clearfix-Welt ist ziemlich ausufernd</a>, aber diese einfache Lösung reicht für die allermeisten modernen Brwoser vollkommen aus."

float_layout.title: "float layout example"
float_layout.1: "Oft werden ganze Layouts mit <code>float</code> realisiert. Hier ist das gleiche Layout, das wir mit <code>position</code> gemacht haben. Nur diesmal haben wir <code>float</code> benutzt."
float_layout.2: "Dieses Beispiel funktioniert genau wie das letzt. Beachte, dass wir einen <code>clearfix</code> auf den Container angewendet haben. Das ist zwar in diesem Beispiel nicht notwendig, währe es aber wenn <code>nav</code> länger währe als der nicht gefloatete Inhalt."

percent.title: "Breiten in Prozent"
percent.1: "Prozent ist eine Maßeinheit relativ zum Umgebenden Block. Es ist Großartig für Bilder: hier machen wir ein Bild das immer 50% so breit ist wie sein Container. Mach das Browserfenster kleiner und schau, was passiert!"
percent.2: "Du könntest sogar <code>min-width</code> und <code>max-width</code> verwenden, um einzuschränken wie klein oder groß das Bild wird."
percent.layout.title: "percent width layout"
percent.layout.1: "Du kannst Prozent für Layouts verwenden, aber das braucht mehr Arbeit.In diesem Beipiel bricht der Inhalt von <code>nav</code> unbefriedigend um, wenn es zu schmal wird. Es kommt immer darauf an, was am besten mit deinem Inhalt funktioniert."
percent.layout.2: "Wird das Layout zu schmal, wird <code>nav</code> zerquetscht. Noch schmlimmer ist, dass du nicht <code>min-width</code> verwenden kannst, um das zu vermeiden, weil die rechte Spalte sich nicht daran halten würde."

media_queries.title: "media queries"
media_queries.1: "\"Responsive Design\" is the strategy of making a site that \"responds\" to the browser and device that it is being shown on... by looking awesome no matter what."
media_queries.2: "Media queries are the most powerful tool for doing this. Let's take our layout that uses percent widths and have it display in one column when the browser is too small to fit the menu in the sidebar:"
media_queries.3: "Now when you resize your browser it's even cooler than ever!"
media_queries.4: "Tada! Now our layout looks great even on mobile browsers. Here are <a href=\"http://mediaqueri.es/\">some popular sites that use media queries this way</a>. There is a whole lot more you can detect than <code>min-width</code> and <code>max-width</code>: check out <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">the MDN documentation</a> to learn more."
media_queries.5: "You can make your layout look even better on mobile using <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "You can create a grid of boxes that fills the browser width and wraps nicely. This has been possible for a long time using <code>float</code>, but now with <code>inline-block</code> it's even easier. Let's look at examples of both approaches."
inline_block.hard_way.title: "The Hard Way (using float)"
inline_block.hard_way.box: "I'm floating!"
inline_block.hard_way.after: "I'm using clear so I don't float next to the above boxes."
inline_block.easy_way.title: "The Easy Way (using inline-block)"
inline_block.easy_way.info: "You can achieve the same effect using the <code>inline-block</code> value of the <code>display</code> property."
inline_block.easy_way.box: "I'm an inline block!"
inline_block.easy_way.after: "I don't have to use <code>clear</code> in this case. Nice!"
inline_block.2: "You have to do extra work for <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">IE6 and IE7 support</a> of <code>inline-block</code>. Sometimes people talk about <code>inline-block</code> triggering something called <code>hasLayout</code>, though you only need to know about that to support old browsers. Follow the previous link about IE6 and IE7 support if you're curious to learn more. Otherwise, let's continue."

inline_block_layout.title: "inline-block layout"
inline_block_layout.1: "You can also use <code>inline-block</code> for layouts. There are a few things to keep in mind:"
inline_block_layout.caveat.1: "<code>inline-block</code> elements are affected by the <code>vertical-align</code> property, which you probably want set to <code>top</code>."
inline_block_layout.caveat.2: "You need to set the width of each column"
inline_block_layout.caveat.3: "There will be a gap between the columns if there is any whitespace between them in the HTML"
inline_block_layout.tada: "Tada!"

column.title: "column"
column.1: "There is a new set of CSS properties that let you easily make multi-column text. Have a look:"
column.2: "CSS columns are very new, so you need to use the prefixes, and it won't work <a href=\"http://caniuse.com/#search=column\">through IE9 or in Opera Mini</a>. There are some more column-related properties, so <a href=\"http://www.quirksmode.org/css/multicolumn.html\">click here to read more</a>. Otherwise, off to the next topic."

flexbox.title: "flexbox"
flexbox.1: "The new <code>flexbox</code> layout mode is poised to redefine how we do layouts in CSS. Unfortunately the specification has changed a lot recently, so it's implemented differently in different browsers. Still, I'd like to share a couple examples so you know what's coming up. These examples currently only work in the Chrome flexbox implementation, based on the <a href=\"http://www.w3.org/TR/css3-flexbox/\">latest version of the standard</a>."
flexbox.2: "There are a lot of out-of-date flexbox resources around. If you want to learn more about flexbox, <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">start here</a> to learn how to identify if a resource is current or not. I have written a <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">detailed article using the latest syntax</a>."
flexbox.3: "There is a lot more you can do with flexbox; these are just a few examples to give you an idea:"
flexbox.simple.title: "Simple Layout using Flexbox"
flexbox.simple.1: "Flexbox is so easy!"
flexbox.fancy.title: "Fancy Layout using Flexbox"
flexbox.fancy.1: "I will be 200px when there is room, and I will shrink down to 100px if there is not room, but no smaller."
flexbox.fancy.2: "I will always be 200px, no matter what."
flexbox.fancy.3: "I will fill up 1/3 of the remaining width."
flexbox.fancy.4: "I will fill up 2/3 of the remaining width."
flexbox.centering.title: "Centering using Flexbox"
flexbox.centering.1: "Finally, it's easy to vertically center something in CSS!"

frameworks.title: "css frameworks"
frameworks.1: "Because CSS layout is so tricky, there are CSS frameworks out there to help make it easier. Here are a few if you want to check them out. Using a framework is only good idea if the framework really does what you need your site to do. They're no replacement for knowing how CSS works."
frameworks.2: "That's it! If you have any feedback on this site, please <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">let me know on Twitter</a>!"

about.title: "über diese site"
about.credits: "Written and built by <a href=\"http://incompl.com\">Greg Smith</a>. Design by <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. We work at <a href=\"http://bocoup.com\">Bocoup</a>."
